default: build

GO ?= $(shell which go)
APP = xiaozhi-gogo
BUILD_DIR = build
TAGS =  # -tags=release
GCFLAGS =
LD_FLAGS =

generate:
	@echo "Generating code..."
	@${GO} generate ./...

build: ensure_build_dir
	@echo "Building the project..."
	${GO} build ${TAGS} ${GCFLAGS} ${LD_FLAGS} -o ${BUILD_DIR}/${APP} ./main.go

test:
	@echo "Running tests..."
	@${GO} test -v ./...

race:
	@echo ""
	@${GO} test -race -v ./...

cover:
	@echo "Running tests with coverage..."
	@${GO} test -coverprofile=build/coverage.out ./...
	@${GO} tool cover -html=build/coverage.out -o  build/coverage.html
	@echo "Coverage report generated: build/coverage.html"
	open build/coverage.html
	

cross:
	@echo "Cross-compiling for multiple platforms..."
	@GOOS=linux GOARCH=amd64 ${GO} build ${TAGS} ${GCFLAGS} ${LD_FLAGS} -o ${BUILD_DIR}/${APP}-linux-amd64 ./main.go
	@GOOS=darwin GOARCH=amd64 ${GO} build ${TAGS} ${GCFLAGS} ${LD_FLAGS} -o ${BUILD_DIR}/${APP}-darwin-amd64 ./main.go
	@GOOS=windows GOARCH=amd64 ${GO} build ${TAGS} ${GCFLAGS} ${LD_FLAGS} -o ${BUILD_DIR}/${APP}-windows-amd64.exe ./main.go

clean:
	@echo "Cleaning up build artifacts..."
	@rm -rf ${BUILD_DIR}/${APP}
	@rm -rf ./webui/dist // which is generated by golang generate

ensure_build_dir:
	@echo "Ensuring build directory exists..."
	@echo mkdir -p ${BUILD_DIR}

install: build
	@echo "Installing the application..."
	@cp ${BUILD_DIR}/${APP} /usr/local/bin/${APP}
	@chmod +x /usr/local/bin/${APP}

